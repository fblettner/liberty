"""upgrade

Revision ID: dd5d460a6436
Revises: 
Create Date: 2025-02-03 00:12:26.662067

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'dd5d460a6436'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade(engine_name: str) -> None:
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name: str) -> None:
    globals()["downgrade_%s" % engine_name]()





def upgrade_liberty() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ly_events',
    sa.Column('evt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_component', sa.VARCHAR(length=20), nullable=False),
    sa.Column('evt_label', sa.VARCHAR(length=100), nullable=True),
    sa.Column('evt_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('evt_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('evt_id')
    )
    op.create_table('ly_evt_cpt',
    sa.Column('evt_component', sa.VARCHAR(length=20), nullable=False),
    sa.Column('evt_cpt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_col_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_seq_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_act_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('evt_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('evt_component', 'evt_cpt_id', 'evt_id', 'evt_col_id')
    )
    op.create_table('ly_evt_dd',
    sa.Column('evt_component', sa.VARCHAR(length=20), nullable=False),
    sa.Column('evt_cpt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_dd_id', sa.VARCHAR(length=50), nullable=False),
    sa.Column('evt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_act_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('evt_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('evt_component', 'evt_cpt_id', 'evt_dd_id', 'evt_id')
    )
    op.create_table('ly_themes',
    sa.Column('thm_id', sa.INTEGER(), nullable=False),
    sa.Column('thm_name', sa.VARCHAR(length=50), nullable=False),
    sa.Column('thm_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('thm_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('thm_id'),
    sa.UniqueConstraint('thm_name', name='ly_themes_thm_name_key')
    )
    op.create_table('ly_thm_colors',
    sa.Column('thm_id', sa.INTEGER(), nullable=False),
    sa.Column('tcl_id', sa.INTEGER(), nullable=False),
    sa.Column('tcl_key', sa.VARCHAR(length=50), nullable=False),
    sa.Column('tcl_light', sa.VARCHAR(length=100), nullable=False),
    sa.Column('tcl_dark', sa.VARCHAR(length=100), nullable=False),
    sa.Column('tcl_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('tcl_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['thm_id'], ['ly_themes.thm_id'], name='ly_thm_colors_thm_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('thm_id', 'tcl_id')
    )
    op.drop_table('databasechangelog')
    op.drop_table('databasechangeloglock')
    op.add_column('ly_applications', sa.Column('apps_replace_null', sa.VARCHAR(length=1), nullable=True))
    op.alter_column('ly_cdn_params', 'cdn_dd_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.drop_constraint('lydlgcolcdn_fk1', 'ly_dlg_col_cdn', type_='foreignkey')
    op.drop_constraint('lydlgtabcdn_fk1', 'ly_dlg_tab_cdn', type_='foreignkey')
    op.drop_constraint('lytblcolcdn_fk1', 'ly_tbl_col_cdn', type_='foreignkey')
    # ### end Alembic commands ###


def downgrade_liberty() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_foreign_key('lytblcolcdn_fk1', 'ly_tbl_col_cdn', 'ly_tables', ['tbl_id'], ['tbl_id'], ondelete='CASCADE')
    op.create_foreign_key('lydlgtabcdn_fk1', 'ly_dlg_tab_cdn', 'ly_dlg_frm', ['frm_id'], ['frm_id'], ondelete='CASCADE')
    op.create_foreign_key('lydlgcolcdn_fk1', 'ly_dlg_col_cdn', 'ly_dlg_frm', ['frm_id'], ['frm_id'], ondelete='CASCADE')
    op.alter_column('ly_cdn_params', 'cdn_dd_id',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.drop_column('ly_applications', 'apps_replace_null')
    op.create_table('databasechangeloglock',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('locked', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('lockgranted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('lockedby', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='databasechangeloglock_pkey')
    )
    op.create_table('databasechangelog',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('author', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('dateexecuted', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('orderexecuted', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exectype', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('md5sum', sa.VARCHAR(length=35), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('comments', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('tag', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('liquibase', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('contexts', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('labels', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('deployment_id', sa.VARCHAR(length=10), autoincrement=False, nullable=True)
    )
    op.drop_table('ly_thm_colors')
    op.drop_table('ly_themes')
    op.drop_table('ly_evt_dd')
    op.drop_table('ly_evt_cpt')
    op.drop_table('ly_events')
    # ### end Alembic commands ###


def upgrade_libnsx1() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ly_events',
    sa.Column('evt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_component', sa.VARCHAR(length=20), nullable=False),
    sa.Column('evt_label', sa.VARCHAR(length=100), nullable=True),
    sa.Column('evt_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('evt_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('evt_id')
    )
    op.create_table('ly_evt_cpt',
    sa.Column('evt_component', sa.VARCHAR(length=20), nullable=False),
    sa.Column('evt_cpt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_col_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_seq_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_act_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('evt_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('evt_component', 'evt_cpt_id', 'evt_id', 'evt_col_id')
    )
    op.create_table('ly_evt_dd',
    sa.Column('evt_component', sa.VARCHAR(length=20), nullable=False),
    sa.Column('evt_cpt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_dd_id', sa.VARCHAR(length=50), nullable=False),
    sa.Column('evt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_act_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('evt_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('evt_component', 'evt_cpt_id', 'evt_dd_id', 'evt_id')
    )
    op.create_table('ly_themes',
    sa.Column('thm_id', sa.INTEGER(), nullable=False),
    sa.Column('thm_name', sa.VARCHAR(length=50), nullable=False),
    sa.Column('thm_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('thm_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('thm_id'),
    sa.UniqueConstraint('thm_name', name='ly_themes_thm_name_key')
    )
    op.create_table('ly_thm_colors',
    sa.Column('thm_id', sa.INTEGER(), nullable=False),
    sa.Column('tcl_id', sa.INTEGER(), nullable=False),
    sa.Column('tcl_key', sa.VARCHAR(length=50), nullable=False),
    sa.Column('tcl_light', sa.VARCHAR(length=100), nullable=False),
    sa.Column('tcl_dark', sa.VARCHAR(length=100), nullable=False),
    sa.Column('tcl_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('tcl_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['thm_id'], ['ly_themes.thm_id'], name='ly_thm_colors_thm_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('thm_id', 'tcl_id')
    )
    op.drop_table('databasechangelog')
    op.drop_table('databasechangeloglock')
    op.add_column('ly_applications', sa.Column('apps_replace_null', sa.VARCHAR(length=1), nullable=True))
    op.drop_constraint('lydlgcolcdn_fk1', 'ly_dlg_col_cdn', type_='foreignkey')
    op.drop_constraint('lydlgtabcdn_fk1', 'ly_dlg_tab_cdn', type_='foreignkey')
    op.drop_constraint('lytblcolcdn_fk1', 'ly_tbl_col_cdn', type_='foreignkey')
    # ### end Alembic commands ###


def downgrade_libnsx1() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_foreign_key('lytblcolcdn_fk1', 'ly_tbl_col_cdn', 'ly_tables', ['tbl_id'], ['tbl_id'], ondelete='CASCADE')
    op.create_foreign_key('lydlgtabcdn_fk1', 'ly_dlg_tab_cdn', 'ly_dlg_frm', ['frm_id'], ['frm_id'], ondelete='CASCADE')
    op.create_foreign_key('lydlgcolcdn_fk1', 'ly_dlg_col_cdn', 'ly_dlg_frm', ['frm_id'], ['frm_id'], ondelete='CASCADE')
    op.drop_column('ly_applications', 'apps_replace_null')
    op.create_table('databasechangeloglock',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('locked', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('lockgranted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('lockedby', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='databasechangeloglock_pkey')
    )
    op.create_table('databasechangelog',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('author', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('dateexecuted', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('orderexecuted', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exectype', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('md5sum', sa.VARCHAR(length=35), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('comments', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('tag', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('liquibase', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('contexts', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('labels', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('deployment_id', sa.VARCHAR(length=10), autoincrement=False, nullable=True)
    )
    op.drop_table('ly_thm_colors')
    op.drop_table('ly_themes')
    op.drop_table('ly_evt_dd')
    op.drop_table('ly_evt_cpt')
    op.drop_table('ly_events')
    # ### end Alembic commands ###


def upgrade_libnjde() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ly_events',
    sa.Column('evt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_component', sa.VARCHAR(length=20), nullable=False),
    sa.Column('evt_label', sa.VARCHAR(length=100), nullable=True),
    sa.Column('evt_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('evt_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('evt_id')
    )
    op.create_table('ly_evt_cpt',
    sa.Column('evt_component', sa.VARCHAR(length=20), nullable=False),
    sa.Column('evt_cpt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_col_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_seq_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_act_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('evt_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('evt_component', 'evt_cpt_id', 'evt_id', 'evt_col_id')
    )
    op.create_table('ly_evt_dd',
    sa.Column('evt_component', sa.VARCHAR(length=20), nullable=False),
    sa.Column('evt_cpt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_dd_id', sa.VARCHAR(length=50), nullable=False),
    sa.Column('evt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_act_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('evt_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('evt_component', 'evt_cpt_id', 'evt_dd_id', 'evt_id')
    )
    op.create_table('ly_themes',
    sa.Column('thm_id', sa.INTEGER(), nullable=False),
    sa.Column('thm_name', sa.VARCHAR(length=50), nullable=False),
    sa.Column('thm_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('thm_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('thm_id'),
    sa.UniqueConstraint('thm_name', name='ly_themes_thm_name_key')
    )
    op.create_table('ly_thm_colors',
    sa.Column('thm_id', sa.INTEGER(), nullable=False),
    sa.Column('tcl_id', sa.INTEGER(), nullable=False),
    sa.Column('tcl_key', sa.VARCHAR(length=50), nullable=False),
    sa.Column('tcl_light', sa.VARCHAR(length=100), nullable=False),
    sa.Column('tcl_dark', sa.VARCHAR(length=100), nullable=False),
    sa.Column('tcl_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('tcl_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['thm_id'], ['ly_themes.thm_id'], name='ly_thm_colors_thm_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('thm_id', 'tcl_id')
    )
    op.drop_table('databasechangelog')
    op.drop_table('databasechangeloglock')
    op.add_column('ly_applications', sa.Column('apps_replace_null', sa.VARCHAR(length=1), nullable=True))
    op.drop_constraint('lydlgcolcdn_fk1', 'ly_dlg_col_cdn', type_='foreignkey')
    op.drop_constraint('lydlgtabcdn_fk1', 'ly_dlg_tab_cdn', type_='foreignkey')
    op.drop_constraint('lytblcolcdn_fk1', 'ly_tbl_col_cdn', type_='foreignkey')
    # ### end Alembic commands ###


def downgrade_libnjde() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_foreign_key('lytblcolcdn_fk1', 'ly_tbl_col_cdn', 'ly_tables', ['tbl_id'], ['tbl_id'], ondelete='CASCADE')
    op.create_foreign_key('lydlgtabcdn_fk1', 'ly_dlg_tab_cdn', 'ly_dlg_frm', ['frm_id'], ['frm_id'], ondelete='CASCADE')
    op.create_foreign_key('lydlgcolcdn_fk1', 'ly_dlg_col_cdn', 'ly_dlg_frm', ['frm_id'], ['frm_id'], ondelete='CASCADE')
    op.drop_column('ly_applications', 'apps_replace_null')
    op.create_table('databasechangeloglock',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('locked', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('lockgranted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('lockedby', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='databasechangeloglock_pkey')
    )
    op.create_table('databasechangelog',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('author', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('dateexecuted', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('orderexecuted', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exectype', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('md5sum', sa.VARCHAR(length=35), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('comments', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('tag', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('liquibase', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('contexts', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('labels', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('deployment_id', sa.VARCHAR(length=10), autoincrement=False, nullable=True)
    )
    op.drop_table('ly_thm_colors')
    op.drop_table('ly_themes')
    op.drop_table('ly_evt_dd')
    op.drop_table('ly_evt_cpt')
    op.drop_table('ly_events')
    # ### end Alembic commands ###


def upgrade_libnetl() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ly_events',
    sa.Column('evt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_component', sa.VARCHAR(length=20), nullable=False),
    sa.Column('evt_label', sa.VARCHAR(length=100), nullable=True),
    sa.Column('evt_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('evt_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('evt_id')
    )
    op.create_table('ly_evt_cpt',
    sa.Column('evt_component', sa.VARCHAR(length=20), nullable=False),
    sa.Column('evt_cpt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_col_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_seq_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_act_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('evt_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('evt_component', 'evt_cpt_id', 'evt_id', 'evt_col_id')
    )
    op.create_table('ly_evt_dd',
    sa.Column('evt_component', sa.VARCHAR(length=20), nullable=False),
    sa.Column('evt_cpt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_dd_id', sa.VARCHAR(length=50), nullable=False),
    sa.Column('evt_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_act_id', sa.INTEGER(), nullable=False),
    sa.Column('evt_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('evt_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('evt_component', 'evt_cpt_id', 'evt_dd_id', 'evt_id')
    )
    op.create_table('ly_themes',
    sa.Column('thm_id', sa.INTEGER(), nullable=False),
    sa.Column('thm_name', sa.VARCHAR(length=50), nullable=False),
    sa.Column('thm_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('thm_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('thm_id'),
    sa.UniqueConstraint('thm_name', name='ly_themes_thm_name_key')
    )
    op.create_table('ly_thm_colors',
    sa.Column('thm_id', sa.INTEGER(), nullable=False),
    sa.Column('tcl_id', sa.INTEGER(), nullable=False),
    sa.Column('tcl_key', sa.VARCHAR(length=50), nullable=False),
    sa.Column('tcl_light', sa.VARCHAR(length=100), nullable=False),
    sa.Column('tcl_dark', sa.VARCHAR(length=100), nullable=False),
    sa.Column('tcl_audit_user', sa.VARCHAR(length=30), nullable=True),
    sa.Column('tcl_audit_date', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['thm_id'], ['ly_themes.thm_id'], name='ly_thm_colors_thm_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('thm_id', 'tcl_id')
    )
    op.drop_table('databasechangelog')
    op.drop_table('databasechangeloglock')
    op.add_column('ly_applications', sa.Column('apps_replace_null', sa.VARCHAR(length=1), nullable=True))
    op.drop_constraint('lydlgcolcdn_fk1', 'ly_dlg_col_cdn', type_='foreignkey')
    op.drop_constraint('lydlgtabcdn_fk1', 'ly_dlg_tab_cdn', type_='foreignkey')
    op.drop_constraint('lytblcolcdn_fk1', 'ly_tbl_col_cdn', type_='foreignkey')
    # ### end Alembic commands ###


def downgrade_libnetl() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_foreign_key('lytblcolcdn_fk1', 'ly_tbl_col_cdn', 'ly_tables', ['tbl_id'], ['tbl_id'], ondelete='CASCADE')
    op.create_foreign_key('lydlgtabcdn_fk1', 'ly_dlg_tab_cdn', 'ly_dlg_frm', ['frm_id'], ['frm_id'], ondelete='CASCADE')
    op.create_foreign_key('lydlgcolcdn_fk1', 'ly_dlg_col_cdn', 'ly_dlg_frm', ['frm_id'], ['frm_id'], ondelete='CASCADE')
    op.drop_column('ly_applications', 'apps_replace_null')
    op.create_table('databasechangeloglock',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('locked', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('lockgranted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('lockedby', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='databasechangeloglock_pkey')
    )
    op.create_table('databasechangelog',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('author', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('dateexecuted', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('orderexecuted', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exectype', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('md5sum', sa.VARCHAR(length=35), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('comments', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('tag', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('liquibase', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('contexts', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('labels', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('deployment_id', sa.VARCHAR(length=10), autoincrement=False, nullable=True)
    )
    op.drop_table('ly_thm_colors')
    op.drop_table('ly_themes')
    op.drop_table('ly_evt_dd')
    op.drop_table('ly_evt_cpt')
    op.drop_table('ly_events')
    # ### end Alembic commands ###


def upgrade_nomasx1() -> None:

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('aud$_license_csi')
    op.drop_table('databasechangelog')
    op.drop_table('aud$_sod_process')
    op.drop_table('databasechangeloglock')
    op.alter_column('audit_trail_query', 'aud_scn',
               existing_type=sa.INTEGER(),
               type_=sa.BIGINT(),
               existing_nullable=False)
    op.alter_column('db_audit', 'aud_apps_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('db_ora_partitions', 'opar_owner',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('db_ora_partitions', 'opar_segment_type',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('db_ora_partitions', 'opar_segment_name',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('db_ora_partitions$', 'opar_owner',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('db_ora_partitions$', 'opar_segment_type',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('db_ora_partitions$', 'opar_segment_name',
               existing_type=sa.VARCHAR(length=255),
               nullable=False)
    op.alter_column('db_ora_partitions$', 'opar_ukid',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('security_audit', 'aud_apps_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('settings_audit', 'aud_scn',
               existing_type=sa.INTEGER(),
               type_=sa.BIGINT(),
               existing_nullable=True)
    # ### end Alembic commands ###

def downgrade_nomasx1() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('settings_audit', 'aud_scn',
               existing_type=sa.BIGINT(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('security_audit', 'aud_apps_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('security_audit', 'aud_id')
    op.alter_column('db_ora_partitions$', 'opar_ukid',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('db_ora_partitions$', 'opar_segment_name',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('db_ora_partitions$', 'opar_segment_type',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('db_ora_partitions$', 'opar_owner',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('db_ora_partitions', 'opar_segment_name',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('db_ora_partitions', 'opar_segment_type',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('db_ora_partitions', 'opar_owner',
               existing_type=sa.VARCHAR(length=255),
               nullable=True)
    op.alter_column('db_audit', 'aud_apps_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('db_audit', 'aud_id')
    op.alter_column('audit_trail_query', 'aud_scn',
               existing_type=sa.BIGINT(),
               type_=sa.INTEGER(),
               existing_nullable=False)
    op.create_table('databasechangeloglock',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('locked', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('lockgranted', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('lockedby', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='databasechangeloglock_pkey')
    )
    op.create_table('aud$_sod_process',
    sa.Column('process_apps_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('process_id', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('process_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('process_audit_user', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('process_audit_date', postgresql.TIMESTAMP(precision=6), autoincrement=False, nullable=True),
    sa.Column('process_ukid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('aud$_user', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('aud$_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    op.create_table('databasechangelog',
    sa.Column('id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('author', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('dateexecuted', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('orderexecuted', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exectype', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('md5sum', sa.VARCHAR(length=35), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('comments', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('tag', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('liquibase', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('contexts', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('labels', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('deployment_id', sa.VARCHAR(length=10), autoincrement=False, nullable=True)
    )
    op.create_table('aud$_license_csi',
    sa.Column('csi_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('csi_description', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('csi_from_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('csi_to_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('csi_status', sa.VARCHAR(length=1), autoincrement=False, nullable=True),
    sa.Column('csi_audit_user', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('csi_audit_date', postgresql.TIMESTAMP(precision=6), autoincrement=False, nullable=True),
    sa.Column('aud$_user', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('aud$_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True)
    )
    # ### end Alembic commands ###

